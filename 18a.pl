#!/usr/bin/perl
use warnings;
use strict;
use feature qw{ say };

use constant TEST => 0;

use ARGV::OrDATA;

sub add {
    reduce("[$_[0],$_[1]]")
}

my %depth_change = ('[' => 1, ']' => -1);
sub reduce {
    my ($f) = @_;
    my $change = 1;
  CHANGE:
    while ($change) {
        undef $change;
        my $depth = 0;
        for my $pos (0 .. length($f) - 1) {
            $depth += $depth_change{ substr $f, $pos, 1 } // 0;
            if ($depth > 4) {
                $change = 1;
                my ($x, $y) = substr($f, $pos) =~ /\[(\d+),(\d+)\]/;
                my $length = 3 + length("$x$y");
                my $before = substr $f, 0, $pos;
                my $after  = substr $f, $pos + $length;

                if (my ($right) = $after =~ /(\d+)/) {
                    my $ny = $y + $right;
                    $after =~ s/$right/$ny/;
                }

                if (my ($left) = $before =~ /.*\D(\d+)/) {
                    my $nx = $x + $left;
                    $before =~ s/.*\D*\K$left/$nx/;
                }
                $f = "${before}0$after";
                next CHANGE
            }
        }
        for my $pos (0 .. length($f) - 1) {
            if (my ($x) = substr($f, $pos) =~ /^(\d{2,})/) {
                $change = 1;
                my $down = int($x / 2);
                my $up = $down + $x % 2;
                $f =~ s/$x/[$down,$up]/;
                next CHANGE
            }
        }
    }
    return $f
}

sub magnitude {
    my ($sf) = @_;
    $sf =~ s/\[(\d+),(\d+)\]/3 * $1 + 2 * $2/ge while $sf =~ /\D/;
    return $sf
}

if (TEST) {
    reduce('[[[[[9,8],1],2],3],4]') eq '[[[[0,9],2],3],4]' or die 1;
    reduce('[7,[6,[5,[4,[3,2]]]]]') eq '[7,[6,[5,[7,0]]]]' or die 2;
    reduce('[[6,[5,[4,[3,2]]]],1]') eq '[[6,[5,[7,0]]],3]' or die 3;
    reduce('[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]') eq '[[3,[2,[8,0]]],[9,[5,[7,0]]]]' or die 4;
    reduce('[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]') eq '[[[[0,7],4],[[7,8],[6,0]]],[8,1]]' or die 5;

    add(add(add('[1,1]', '[2,2]'),'[3,3]'),'[4,4]') eq '[[[[1,1],[2,2]],[3,3]],[4,4]]' or die 6;
    add(add(add(add('[1,1]', '[2,2]'),'[3,3]'),'[4,4]'),'[5,5]') eq '[[[[3,0],[5,3]],[4,4]],[5,5]]' or die 7;
    add(add(add(add(add('[1,1]', '[2,2]'),'[3,3]'),'[4,4]'),'[5,5]'),'[6,6]') eq '[[[[5,0],[7,4]],[5,5]],[6,6]]' or die 8;

    add('[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]','[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]') eq '[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]' or die 10;
    add('[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]','[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]') eq '[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]' or die 11;
    add('[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]','[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]') eq '[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]' or die 12;
    add('[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]','[7,[5,[[3,8],[1,4]]]]') eq '[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]' or die 13;
    add('[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]','[[2,[2,2]],[8,[8,1]]]') eq '[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]' or die 14;
    add('[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]','[[[5,[7,4]],7],1]') eq '[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]' or die 17;

    add('[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]','[2,9]') eq '[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]' or die 15;
    add('[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]','[1,[[[9,3],9],[[9,0],[0,7]]]]') eq '[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]' or die 16;
    add('[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]','[[[[4,2],2],6],[8,7]]') eq '[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]' or die 18;
}

chomp( my $result = <> );
while (<>) {
    chomp;
    $result = add($result, $_);
}
my $m = magnitude($result);
say $m;

__DATA__
[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
[[[5,[2,8]],4],[5,[[9,9],0]]]
[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
[[[[5,4],[7,7]],8],[[8,3],8]]
[[9,3],[[9,9],[6,[4,9]]]]
[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]
